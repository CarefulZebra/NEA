function init(self)
	msg.post(".", "acquire_input_focus")
	veloSelf = vmath.vector3()
	-- initialise the vector of the player's velocity as an empty vector
	_G.time = 0
	tempTime = 0
	movedLeft = false
	movedRight = false
	inDistance = {}
	health = 100
	attackTempTime = 0
	attacking = true
	bulletTempTime = 0
	playerRangedAttack = 0
	playerMeleeAttack = 0
	knockbackCycle = 0
	pullInCycle = 0
	-- global variables used for the cooldown of the dash functionality
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	if paused == false then
		if health == 0 then
			go.delete()
			sys.exit(0)
		end
		local bossPosition = go.get_position("/boss")
		local pPos = go.get_position()
		local right = bossPosition.x > pPos.x
		if knockbackCycle > 0 and right == true then
			veloSelf.x = veloSelf.x - 1000
			knockbackCycle = knockbackCycle - 1
		elseif knockbackCycle > 0 and right == false then
			veloSelf.x = veloSelf.x + 1000
			knockbackCycle = knockbackCycle - 1
		elseif pullInCycle > 0 and right == true then
			veloSelf.x = veloSelf.x + 1000
			pullInCycle = pullInCycle - 1
		elseif pullInCycle > 0 and right == false then
			veloSelf.x = veloSelf.x - 1000
			pullInCycle = pullInCycle - 1
		end
		_G.time = _G.time + 1
		-- update the global time variable every tick
		movedy = false
		-- boolean to check if the player just moved up/down to smooth out later parts
		local position = go.get_position()
		tempy = position.y
		position = position + (veloSelf * dt)
		-- get the position, save the y before any movement, then create a position for where the player should be
		if position.y ~= tempy then
			movedy = true
		else
			movedy = false
		end
		-- determine if the player moved in the y direction
		go.set_position(position)
		veloSelf.x = 0
		veloSelf.y = 0
		-- update the player's position and zero out the player's velocity so they don't move in one direction infinitely
	end
end

function on_message(self, message_id, message, sender)
		
		if message_id == hash("enter&[/bee/bee]") then
			table.insert(inDistance, "/bee/bee")
		elseif message_id == hash("exit&[/bee/bee]") then
			table.remove(inDistance)
		elseif message_id == hash("beeDie") then
			table.remove(inDistance)
		elseif message_id == hash("enter&[/boss]") then
			table.insert(inDistance, "/boss")
		elseif message_id == hash("exit&[/boss]") then
			table.remove(inDistance)
		end
		if message_id == hash("hit") then
			health = health - 5
		end
		if message_id == hash("knockback") then
			knockbackCycle = 8
		elseif message_id == hash("pullIn") then
			pullInCycle = 8
		end
		--url: [default:/bee/bee#bee]
end

	function on_input(self, action_id, action)
		counter = 1
		-- initialise a counter to deal with smoother bouncing
		
		
		if action_id == hash("up") then
			if movedy == true then
				counter = counter + 1
				veloSelf.y = 220 * (1 / counter)
				-- if the player should be jumping and if they just moved up they should increase velocity by less so that the bouncing is smoother
			else
				counter = 1
				veloSelf.y = 220
				-- otherwise just give the player a standard velocity upwards
			end
		elseif action_id == hash("left") then
			veloSelf.x = veloSelf.x - 100
			movedLeft = true
			movedRight = false
		elseif action_id == hash("right") then 
			veloSelf.x = veloSelf.x + 100
			movedRight = true
			movedLeft = false
		elseif action_id == hash("dash") then
			if _G.time - tempTime > 300 then
				
				if movedLeft == true then
					veloSelf.x = -6000
				else
					veloSelf.x = 6000
				end
				tempTime = _G.time
			end
			
			--dash in the direction previously moving so that the dash is actually helpful
		elseif action_id == hash("attack") and table.getn(inDistance) > 0 and action.repeated then
			if attacking == true then
				attackTempTime = attackTempTime + 1
				local squareUrl = "/lvlStuff/square" .. attackTempTime
				local squarePos = go.get_position(squareUrl)
				squarePos.z = 1
				go.set_position(squarePos, squareUrl)
				if attackTempTime == 7 then
					playerMeleeAttack = playerMeleeAttack + 1
					msg.post(inDistance[1], "hit")
					attacking = not attacking
					
				end
			else
				local squareUrl = "/lvlStuff/square" .. attackTempTime
				local squarePos = go.get_position(squareUrl)
				squarePos.z = -1
				go.set_position(squarePos, squareUrl)
				attackTempTime = attackTempTime - 1
				if attackTempTime == 0 then
					attacking = true
				end
					
				--okay now you gotta make thje attack cooldown then ranged then make the boss ok? i'm gonna go watch a cakejumper stream lol byee
			end
		elseif action_id == hash("shoot") and _G.time - bulletTempTime > 120 then 
			playerRangedAttack = playerRangedAttack + 1
			local playerPos = go.get_position()
			playerPos.y = playerPos.y - 25
			local bulletId = factory.create("/bulletSpawner#factory", playerPos, nil, nil, 0.03)
			table.insert(bulletsOnScreen, bulletId)
			local gradient = (action.y - playerPos.y) / (action.x - playerPos.x)
			table.insert(gradients, gradient)
			if action.x - playerPos.x < 0 then
				table.insert(bulletXDirections, -1)
			else
				table.insert(bulletXDirections, 1)
			end
			msg.post(bulletId, "positions", { position = vmath.vector3(action.x, action.y, 0) })
			bulletTempTime = _G.time
		end
		-- if the user inputs left or right update the velocity accordingly
		-- if the user inputs shift then move with more speed left or right and start a cooldown timer
		-- down controls are not needed due to the 2d nature of the game - if they want to go down either they can't or gravity will help them
end


function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
