function init(self)
	posCount = 100
	newPos = _G.prev[posCount]
	newPos.x = newPos.x - go.get("#sprite", "size.x")
	newPos.y = newPos.y - go.get("#sprite", "size.y")
	tempDist = 100
	direction = "up"
	inPlayerDistance = false
	cycleCount = 0
	beeHealth = 25
	playerUrl = "/player/player"
	spawned = false
	--initialisation of the variables needed later on
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	
	
	if paused == false then
		--every relevant script's update() only runs if the player hasn't indicated they want to pause the game
		if math.fmod(_G.time, 300) == 0 and inPlayerDistance == true then
			msg.post(playerUrl, "hit")
		end
		--if the bee is in range of the player then hit the player every 5 seconds
		
		if beeHealth == 0 then
			msg.post(playerUrl, "beeDie")
			go.delete()
			spawned = true
			go.set_position(vmath.vector3(950, 120, 0), "/boss")
		end
		--if the bee's health has reached 0 then tell the player script that the bee has died so that the player doesn't try to attack a dead bee,
		--delete the game object, and initiate the spawning of the boss enemy
		
		local pos = go.get_position()
		if math.fmod(_G.time, 300) == 0 then
			--print("tempDist " .. tempDist)
			
			newDist = math.sqrt((math.abs(pos.x - newPos.x) ^ 2) + (math.abs(pos.y - newPos.y) ^ 2))
			if newDist > tempDist - 3 and newDist < tempDist + 3 and inPlayerDistance == false then
				--print("success")
				cycleCount = 60
				--if direction == "up" then
					--newPos.y = newPos.y + 100
					--direction = "right"
				--elseif direction == "right" then
					--newPos.x = newPos.x + 100
					--direction = "down"
				--elseif direction == "down" then
					--newPos.y = newPos.y - 100
					--direction = "left"
				--else
					--newPos.x = newPos.x - 100
					--direction = "up"
				--end
				--if newPos.x > pos.x - 3 and newPos.x < pos.x + 3 then
					--newPos = vmath.vector3(newPos.x + 5, newPos.y, 1)
				--else
					--newPos = vmath.vector3(newPos.x, newPos.y + 5, 1)
				--end
				--for i,j in pairs(_G.dijkstra) do
					--for l,v in pairs(j) do
						--if v == newPos then
							--posCount = 10 * (i - 1) + l
							--print("posCount " .. posCount)
						--end
					--end
				--end
				--newPos = _G.prev[posCount]
				newPos.x = newPos.x - math.floor(go.get("#sprite", "size.x") * 0.1)
				newPos.y = newPos.y - math.floor(go.get("#sprite", "size.y") * 0.1)
			else
				tempDist = newDist
			end
		end 
		msg.post("#collisionobject", "apply_force", {force = vmath.vector3(0, 1000, 0), position = pos})
		flagX = false
		flagY = false
		--print("math.ceil(newPos.x) " .. math.ceil(newPos.x))
		--print("math.ceil(newPos.y) " .. math.ceil(newPos.y))
		if cycleCount == 0 then
			if math.ceil(pos.x) > math.ceil(newPos.x) then
				pos.x = pos.x - 1
			elseif math.ceil(pos.x) < math.ceil(newPos.x) then
				pos.x = pos.x + 1
			else
				flagX = true
			end
			if math.ceil(pos.y) > math.ceil(newPos.y) then
				pos.y = pos.y - 1
			elseif math.ceil(pos.y) < math.ceil(newPos.y) then
				pos.y = pos.y + 1
			else
				flagY = true
			end
		else
			--print("happening")
			if direction == "up" then
				pos.y = pos.y + 1 
			elseif direction == "right" then
				pos.x = pos.x + 1
			elseif direction == "down" then
				pos.y = pos.y - 1
			else
				pos.x = pos.x - 1
			end
			cycleCount = cycleCount - 1
			if cycleCount == 0 then
				newPos = pos
				if direction == "up" then
					direction = "right"
				elseif direction == "right" then
					direction = "down"
				elseif direction == "down" then
					direction = "left"
				else
					direction = "up"
				end
				local checkDistance = math.huge
				
				for i,j in pairs(_G.dijkstra) do
					for l,v in pairs(j) do
						if math.sqrt((math.abs(v.x - newPos.x) ^ 2) + (math.abs(v.y - newPos.y) ^ 2)) < checkDistance then
							posCount = 10 * (i - 1) + l
							checkDistance = math.sqrt((math.abs(v.x - newPos.x) ^ 2) + (math.abs(v.y - newPos.y) ^ 2))
						end
					end
				end
				newPos = _G.prev[posCount]
			end
		end
		if flagX == true and flagY == true then
			--print("pos " .. pos)
			for i,j in pairs(_G.dijkstra) do
				for l,v in pairs(j) do
					if v == newPos then
						posCount = 10 * (i - 1) + l
						--print("posCount " .. posCount)
					end
				end
			end
			newPos = _G.prev[posCount]
			newPos.x = newPos.x - math.floor(go.get("#sprite", "size.x") * 0.1)
			newPos.y = newPos.y - math.floor(go.get("#sprite", "size.y") * 0.1)
		end
		--print("math.ceil(pos.x) " .. math.ceil(pos.x))
		--print("math.ceil(pos.y) " .. math.ceil(pos.y))
		go.set_position(pos)
	else
		local pos = go.get_position()
		msg.post("#collisionobject", "apply_force", {force = vmath.vector3(0, 1000, 0), position = pos})
	end
end

function on_message(self, message_id, message, sender)
	-- check for the message
	if message_id == hash("trigger_response") then
		
		if message.enter and message.other_id == hash("/player/player") then
			-- take action for entry
			msg.post(message.other_id, "enter&" .. go.get_id())
			inPlayerDistance = true
		elseif not message.enter and message.other_id == hash("/player/player") then
			-- take action for exit
			msg.post(message.other_id, "exit&" .. go.get_id())
			inPlayerDistance = false
		end
	end
	if message_id == hash("hit") then
		beeHealth = beeHealth - 5
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
	
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
