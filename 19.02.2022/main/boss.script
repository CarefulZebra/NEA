function init(self)
	jumpCounter = 0
	noJumpCounter = 0
	distChecker = {1}
	needToJump = false
	bossHealth = 100
	flagX = false
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	if paused == false then
		if spawned == true then
			if bossHealth == 0 then
				go.delete(go.get_id())
			end
			local oldPos = go.get_position()
			local distCheckerSize = table.getn(distChecker)
			if distCheckerSize == 3 then
				if math.abs(distChecker[3].x - distChecker[2].x) < 10 and flagX == false then
					jumpCounter = 25
				elseif math.fmod(_G.time, 60) == 0 then
					table.insert(distChecker, oldPos)
				end
				table.remove(distChecker, 1)
			else
				if math.fmod(_G.time, 60) == 0 then
					table.insert(distChecker, oldPos)
				end
			end
			--if table.getn(distChecker) ~= 4 then
				--table.insert(distChecker, math.floor(oldPos.x))
				--print("OldPos.x " .. oldPos.x)
			--else
				--distChecker = {}
			--end
			local playerPos = go.get_position("/player/player")
			local newPos = go.get_position()
			local bossPythag = math.sqrt((math.abs(newPos.x - playerPos.x) ^ 2) + (math.abs(newPos.y - playerPos.y) ^ 2))
			flagX = false
			
			if jumpCounter == 0 then
				noJumpCounter = noJumpCounter + 1
				if oldPos.x - playerPos.x > 50 then
					newPos.x = newPos.x - 1
				elseif oldPos.x - playerPos.x < -50 then
					newPos.x = newPos.x + 1
				elseif bossPythag < 100 then
					flagX = true
				end
				go.set_position(newPos)
				--newPos = go.get_position()
				--if table.getn(distChecker) == 4 then
					--if distChecker[1] == distChecker[3] then
						--needToJump = true
					--else
						--needToJump = false
					--end
				--end
				--if needToJump and flagX == false and noJumpCounter == 60 then 
					--jumpCounter = 25
				--end
			else
				noJumpCounter = 0
				--print("boss jumping")
				newPos.y = newPos.y + 2
				go.set_position(newPos)
				
				jumpCounter = jumpCounter - 1
			end
			if bossInPlayerDistance == true and math.fmod(_G.time, 180) == 0 then
				msg.post("/player/player", "hit")
				if playerRangedAttack <= playerMeleeAttack then
					msg.post("/player/player", "knockback")
				else
					msg.post("/player/player", "pullIn")
				end
			end
		else
			local pos = go.get_position()
			msg.post("#collisionobject", "apply_force", {force = vmath.vector3(0, 1000, 0), position = pos})
		end
	else
		local pos = go.get_position()
		msg.post("#collisionobject", "apply_force", {force = vmath.vector3(0, 1000, 0), position = pos})
	end
end

function on_message(self, message_id, message, sender)
	--if message_id == hash("collision_response") and message.other_position.x ~= go.get_position().x then
		
		--jumpCounter = 25
		--print(message.other_position)
		--end	
		if message_id == hash("hit") then
			bossHealth = bossHealth - 10
		end
		if message_id == hash("trigger_response") then

			if message.enter and message.other_id == hash("/player/player") then
				-- take action for entry
				msg.post(message.other_id, "enter&" .. go.get_id())
				bossInPlayerDistance = true
			elseif not message.enter and message.other_id == hash("/player/player") then
				-- take action for exit
				msg.post(message.other_id, "exit&" .. go.get_id())
				bossInPlayerDistance = false
			end
		end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
