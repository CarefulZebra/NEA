function init(self)
	posCount = 100
	newPos = _G.prev[posCount]
	newPos.x = newPos.x - go.get("#sprite", "size.x")
	newPos.y = newPos.y - go.get("#sprite", "size.y")
	tempDist = 100
	direction = "up"
	inPlayerDistance = false
	cycleCount = 0
	beeHealth = 25
	playerUrl = "/player/player"
	spawned = false
	--initialisation of the variables needed later on
end

function final(self)
	
end

function update(self, dt)
	
	
	if paused == false then
		--most of every relevant script's update() function only runs if the player hasn't indicated they want to pause the game
		if math.fmod(_G.time, 300) == 0 and inPlayerDistance == true then
			msg.post(playerUrl, "hit")
		end
		--if the bee is in range of the player then hit the player every 5 seconds
		
		if beeHealth == 0 then
			msg.post(playerUrl, "beeDie")
			go.delete()
			spawned = true
			go.set_position(vmath.vector3(950, 120, 0), "/boss")
		end
		--if the bee's health has reached 0 then tell the player script that the bee has died so that the player doesn't try to attack a dead bee,
		--delete the game object, and initiate the spawning of the boss enemy
		
		local pos = go.get_position()
		if math.fmod(_G.time, 300) == 0 then
			--print("tempDist " .. tempDist)
			
			newDist = math.sqrt((math.abs(pos.x - newPos.x) ^ 2) + (math.abs(pos.y - newPos.y) ^ 2))
			if newDist > tempDist - 3 and newDist < tempDist + 3 and inPlayerDistance == false then
				cycleCount = 60
				newPos.x = newPos.x - math.floor(go.get("#sprite", "size.x") * 0.1)
				newPos.y = newPos.y - math.floor(go.get("#sprite", "size.y") * 0.1)
			else
				tempDist = newDist
			end
			--check if the bee isn't moving far despite not being in range of the player and if so run the code to attempt to get the bee unstuck
		end 
		msg.post("#collisionobject", "apply_force", {force = vmath.vector3(0, 1000, 0), position = pos})
		--negate gravity for the bee
		
		flagX = false
		flagY = false
		--initialise the booleans to check if the bat is in range of the next dijkstra's node
		
		if cycleCount == 0 then
			if math.ceil(pos.x) > math.ceil(newPos.x) then
				pos.x = pos.x - 1
			elseif math.ceil(pos.x) < math.ceil(newPos.x) then
				pos.x = pos.x + 1
			else
				flagX = true
			end
			if math.ceil(pos.y) > math.ceil(newPos.y) then
				pos.y = pos.y - 1
			elseif math.ceil(pos.y) < math.ceil(newPos.y) then
				pos.y = pos.y + 1
			else
				flagY = true
			end
			--if the bee isn't currently stuck then move left if the next dijkstra's node is to the left, right if the next dijkstra's node is to the right, the same for up and down, and if in range of the 
			--next dijkstra's node in the x and/or y direction then update the flag variables
			
		else
			
			if direction == "up" then
				pos.y = pos.y + 1 
			elseif direction == "right" then
				pos.x = pos.x + 1
			elseif direction == "down" then
				pos.y = pos.y - 1
			else
				pos.x = pos.x - 1
			end
			--if the bee is stuck then attempt to move right for a while, try again, down for a while, try again, and so on
			
			cycleCount = cycleCount - 1
			if cycleCount == 0 then
				newPos = pos
				if direction == "up" then
					direction = "right"
				elseif direction == "right" then
					direction = "down"
				elseif direction == "down" then
					direction = "left"
				else
					direction = "up"
				end
				local checkDistance = math.huge
				
				for i,j in pairs(_G.dijkstra) do
					for l,v in pairs(j) do
						if math.sqrt((math.abs(v.x - newPos.x) ^ 2) + (math.abs(v.y - newPos.y) ^ 2)) < checkDistance then
							posCount = 10 * (i - 1) + l
							checkDistance = math.sqrt((math.abs(v.x - newPos.x) ^ 2) + (math.abs(v.y - newPos.y) ^ 2))
						end
					end
				end
				
				newPos = _G.prev[posCount]
				--try again from the new position of the bat by attempting a new dijkstra's path from where it currently is
				
			end
		end
		if flagX == true and flagY == true then
			
			for i,j in pairs(_G.dijkstra) do
				for l,v in pairs(j) do
					if v == newPos then
						posCount = 10 * (i - 1) + l
						
					end
				end
			end
			newPos = _G.prev[posCount]
			--if the bee has reached the next dijkstra's node then tell it to go to the one after that in the sequence so as to pathfind to the player
			
			newPos.x = newPos.x - math.floor(go.get("#sprite", "size.x") * 0.1)
			newPos.y = newPos.y - math.floor(go.get("#sprite", "size.y") * 0.1)
			--make sure the bee's position is scaled properly with the size of the sprite 
			
		end
		
		go.set_position(pos)
		--update the bee's position
		
	else
		local pos = go.get_position()
		msg.post("#collisionobject", "apply_force", {force = vmath.vector3(0, 1000, 0), position = pos})
		--if the game is paused then negate gravity but don't do anything else for the bee
	end
end

function on_message(self, message_id, message, sender)
	-- check for the message
	if message_id == hash("trigger_response") then
		
		if message.enter and message.other_id == hash("/player/player") then
			
			msg.post(message.other_id, "enter&" .. go.get_id())
			inPlayerDistance = true
			--if the bee enters the player's trigger collision object then tell the player it is in range and update the bee's value for whether or not it is in range
			
		elseif not message.enter and message.other_id == hash("/player/player") then
			
			msg.post(message.other_id, "exit&" .. go.get_id())
			inPlayerDistance = false
			--if the bee exits the player's trigger collision object then tell the player it is out of range and update the bee's value for whether or not it is in range
			
		end
	end
	
	if message_id == hash("hit") then
		beeHealth = beeHealth - 5
	end
	--if the bee has been hit then update its health 
	
end

function on_input(self, action_id, action)
	
end

function on_reload(self)
	
end
