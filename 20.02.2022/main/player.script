function init(self)
	msg.post(".", "acquire_input_focus")
	veloSelf = vmath.vector3()
	-- initialise the vector of the player's velocity as an empty vector
	_G.time = 0
	tempTime = 0
	movedLeft = false
	movedRight = false
	inDistance = {}
	health = 100
	attackTempTime = 0
	attacking = true
	bulletTempTime = 0
	playerRangedAttack = 0
	playerMeleeAttack = 0
	knockbackCycle = 0
	pullInCycle = 0
	--initialise the variables used for later on
end

function final(self)
	
end

function update(self, dt)
	if paused == false then
		--most of every relevant script's update() function only runs if the player hasn't indicated they want to pause the game
		
		if health == 0 then
			go.delete()
			sys.exit(0)
			--if the player's health is 0, kill the player and kill the application with a successfull exit code (0)
		end
		
		local bossPosition = go.get_position("/boss")
		local pPos = go.get_position()
		local right = bossPosition.x > pPos.x
		--grab the boss's position, player's position, and determine whether the player is to the right of the boss or not for the following code
		
		if knockbackCycle > 0 and right == true then
			veloSelf.x = veloSelf.x - 1000
			knockbackCycle = knockbackCycle - 1
		elseif knockbackCycle > 0 and right == false then
			veloSelf.x = veloSelf.x + 1000
			knockbackCycle = knockbackCycle - 1
			--if the boss is knocking the player back then add to the player's velocity in the opposite direction to the boss and increment the knockback cycle downwards
			
		elseif pullInCycle > 0 and right == true then
			veloSelf.x = veloSelf.x + 1000
			pullInCycle = pullInCycle - 1
		elseif pullInCycle > 0 and right == false then
			veloSelf.x = veloSelf.x - 1000
			pullInCycle = pullInCycle - 1
			--if the boss is pulling the player in then add to the player's velocity in the direction of the boss and increment the pull in cycle downwards
			
		end
		_G.time = _G.time + 1
		-- update the global time variable every tick
		movedy = false
		-- boolean to check if the player just moved up/down to smooth out later parts
		local position = go.get_position()
		tempy = position.y
		position = position + (veloSelf * dt)
		-- get the position, save the y before any movement, then create a position for where the player should be
		if position.y ~= tempy then
			movedy = true
		else
			movedy = false
		end
		-- determine if the player moved in the y direction
		go.set_position(position)
		veloSelf.x = 0
		veloSelf.y = 0
		-- update the player's position and zero out the player's velocity so they don't move in one direction infinitely
	end
end

function on_message(self, message_id, message, sender)
		
		if message_id == hash("enter&[/bee/bee]") then
			table.insert(inDistance, "/bee/bee")
		elseif message_id == hash("exit&[/bee/bee]") then
			table.remove(inDistance)
		elseif message_id == hash("beeDie") then
			table.remove(inDistance)
		elseif message_id == hash("enter&[/boss]") then
			table.insert(inDistance, "/boss")
		elseif message_id == hash("exit&[/boss]") then
			table.remove(inDistance)
		end
		--if something alerts the player that it is in its radius then add that thing to the in distance table
		--if something alerts the player that it is leaving its radius then remove that thing from the in distance table
		
		if message_id == hash("hit") then
			health = health - 5
		end
		--if the player gets hit then lower the health
		
		if message_id == hash("knockback") then
			knockbackCycle = 8
		elseif message_id == hash("pullIn") then
			pullInCycle = 8
		end
		--if the player gets told that it is being knocked back or pulled in then update the variables for those cycles accordingly
end

	function on_input(self, action_id, action)
		counter = 1
		-- initialise a counter to deal with smoother bouncing
		
		if action_id == hash("up") then
			if movedy == true then
				counter = counter + 1
				veloSelf.y = 220 * (1 / counter)
				-- if the player should be jumping and if they just moved up they should increase velocity by less so that the bouncing is smoother
				
			else
				counter = 1
				veloSelf.y = 220
				-- otherwise just give the player a standard velocity upwards
				
			end
		elseif action_id == hash("left") then
			veloSelf.x = veloSelf.x - 100
			movedLeft = true
			movedRight = false
		elseif action_id == hash("right") then 
			veloSelf.x = veloSelf.x + 100
			movedRight = true
			movedLeft = false
		elseif action_id == hash("dash") then
			if _G.time - tempTime > 300 then
				
				if movedLeft == true then
					veloSelf.x = -6000
				else
					veloSelf.x = 6000
				end
				tempTime = _G.time
			end
			
			--dash in the direction previously moving so that the dash is actually helpful and isn't forced in one direction
			-- if the user inputs left or right update the velocity accordingly
			-- if the user inputs shift then move with more speed left or right and start a cooldown timer
			-- down controls are not needed due to the 2d nature of the game - if they want to go down either they can't or gravity will help them
			
		elseif action_id == hash("attack") and table.getn(inDistance) > 0 and action.repeated then
			--check if the player wants to attack, there is something in range to be attacked, and if the player isn't spamming the button but rather just holding it down (this is for the breathing cycle)
			if attacking == true then
				attackTempTime = attackTempTime + 1
				local squareUrl = "/lvlStuff/square" .. attackTempTime
				local squarePos = go.get_position(squareUrl)
				squarePos.z = 1
				go.set_position(squarePos, squareUrl)
				if attackTempTime == 7 then
					playerMeleeAttack = playerMeleeAttack + 1
					msg.post(inDistance[1], "hit")
					attacking = not attacking
					
				end
				--if the attack is in attacking mode the display the square as appropriate and if this is the seventh tick of attack mode hit what needs hitting, increment the player's melee attack counter and put it in not attacking mode
				
			else
				local squareUrl = "/lvlStuff/square" .. attackTempTime
				local squarePos = go.get_position(squareUrl)
				squarePos.z = -1
				go.set_position(squarePos, squareUrl)
				attackTempTime = attackTempTime - 1
				if attackTempTime == 0 then
					attacking = true
				end
				--if the attack isn't in attacking mode then hide the square as appropriate and if this is the seventh tick of the non attacking mode put the attack back in attacking mode 
				
			end
		elseif action_id == hash("shoot") and _G.time - bulletTempTime > 120 then 
			playerRangedAttack = playerRangedAttack + 1
			local playerPos = go.get_position()
			playerPos.y = playerPos.y - 25
			local bulletId = factory.create("/bulletSpawner#factory", playerPos, nil, nil, 0.03)
			--if the player presses the shoot button and over two seconds has passed since the lasat bullet was fired use the bullet factory to create a bullet at the position of the player's hand
			
			table.insert(bulletsOnScreen, bulletId)
			local gradient = (action.y - playerPos.y) / (action.x - playerPos.x)
			table.insert(gradients, gradient)
			if action.x - playerPos.x < 0 then
				table.insert(bulletXDirections, -1)
			else
				table.insert(bulletXDirections, 1)
			end
			--add to the appropriate tables the bullet, the bullet's gradient, and the direction the bullet should be travelling in (not the gradient but simply left or right of the player)
			
			msg.post(bulletId, "positions", { position = vmath.vector3(action.x, action.y, 0) })
			bulletTempTime = _G.time
			--tell the bullet the position of the mouse, and update the temp time for bullets (bullets can only be shot every two seconds or more)
			
		end
		
end


function on_reload(self)
	
end
