function init(self)
	msg.post(".", "acquire_input_focus")
	veloSelf = vmath.vector3()
	-- initialise the vector of the player's velocity as an empty vector
	_G.time = 0
	_G.tempTime = 0
	_G.movedLeft = false
	_G.movedRight = false
	-- global variables used for the cooldown of the dash functionality
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	_G.time = _G.time + 1
	-- update the global time variable every tick
	movedy = false
	-- boolean to check if the player just moved up/down to smooth out later parts
	local position = go.get_position()
	tempy = position.y
	position = position + (veloSelf * dt)
	-- get the position, save the y before any movement, then create a position for where the player should be
	if position.y ~= tempy then
		movedy = true
	else
		movedy = false
	end
	-- determine if the player moved in the y direction
	go.set_position(position)
	veloSelf.x = 0
	veloSelf.y = 0
	-- update the player's position and zero out the player's velocity so they don't move in one direction infinitely
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	counter = 1
	-- initialise a counter to deal with smoother bouncing
	
	
	if action_id == hash("up") then
		if movedy == true then
			counter = counter + 1
			veloSelf.y = 220 * (1 / counter)
			-- if the player should be jumping and if they just moved up they should increase velocity by less so that the bouncing is smoother
		else
			counter = 1
			veloSelf.y = 220
			-- otherwise just give the player a standard velocity upwards
		end
	elseif action_id == hash("left") then
		veloSelf.x = veloSelf.x - 100
		_G.movedLeft = true
		_G.movedRight = false
	elseif action_id == hash("right") then 
		veloSelf.x = veloSelf.x + 100
		_G.movedRight = true
		_G.movedLeft = false
	elseif action_id == hash("dash") then
		if _G.time - _G.tempTime > 300 then
			if _G.movedLeft == true then
				veloSelf.x = -6000
			else
				veloSelf.x = 6000
			end
			_G.tempTime = _G.time
		end
		
			--dash in the direction previously moving so that the dash is actually helpful
	end
	-- if the user inputs left or right update the velocity accordingly
	-- if the user inputs shift then move with more speed left or right and start a cooldown timer
	-- down controls are not needed due to the 2d nature of the game - if they want to go down either they can't or gravity will help them
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
